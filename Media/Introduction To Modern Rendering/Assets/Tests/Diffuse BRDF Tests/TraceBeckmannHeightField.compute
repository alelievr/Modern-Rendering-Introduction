#pragma kernel Trace
#pragma kernel ClearLUT
#pragma kernel ClearDebug

#pragma target 6.5

#pragma enable_d3d11_debug_symbols

#include "DebugLines.hlsl"
#include "Random.hlsl"

#define PI 3.14159265358979323846

// #define DEBUG_NORMAL_HIT

Texture2D<float> _HeightField;
SamplerState sampler_HeightField;
RWTexture3D<uint> _OutputLUT;

RWTexture2D<float4> _DebugTrace;

int  _MaxBounces;
float _Roughness;
float3 _RayDir;
uint _Seed;

float2 _DebugCursorPosition;

uint3 _LUTSize;

uint g_IsDebugThread;

float SampleHeightField(float2 uv, float localToWorldScale)
{
    float h = _HeightField.SampleLevel(sampler_HeightField, uv + 0.5, 0);
    return h * localToWorldScale;
}

// naive ray‐march against the height field
float IntersectHeightField(float3 origin, float3 dir, float localToWorldScale)
{
    uint maxSteps = 5000;
    float stepSize = 0.0001;
    float t = 0;

    // Calculate the max distance a ray could traverse using two planes
    float t1 = (5.0 * localToWorldScale - origin.y) / dir.y;
    float t2 = (-5.0 * localToWorldScale - origin.y) / dir.y;
    float totalVolumeDistance = abs(t1 - t2);
    totalVolumeDistance = min(totalVolumeDistance, 100.0 * localToWorldScale); // Limit to avoid skipping too far

    stepSize = totalVolumeDistance / (float)maxSteps;

    for (uint i = 0; i < maxSteps; ++i)
    {
        float3 p = origin + t * dir;

        // We remove 1 because the height field is below the plane (to match the POM visualization)
        float h = SampleHeightField(p.xz, localToWorldScale);
        if (p.y < h)
        {
            // If we return this distance, the next point will be under the surface,
            // so we need to offset it a bit before continuing.
            return t - stepSize * 2;
        }

        // If we're above the surface, it means that the ray bounced back so we can stop
        if (p.y > 5 * localToWorldScale && dir.y > 0)
            return -1;

        t += stepSize;
    }
    return -1;
}

float3 GetHeightFieldNormal(float2 pos, float localToWorldScale)
{
	float2 eps = float2(localToWorldScale, 0);

	float HXn = SampleHeightField(pos - eps.xy, localToWorldScale);
	float HXp = SampleHeightField(pos + eps.xy, localToWorldScale);
	float HYn = SampleHeightField(pos - eps.yx, localToWorldScale);
	float HYp = SampleHeightField(pos + eps.yx, localToWorldScale);

#ifdef DEBUG_NORMAL_HIT
    if (g_IsDebugThread)
    {
        // Debug sampling values
        AddDebugLine(float3(pos.x + eps.x, HXp, pos.y + eps.y), float3(pos.x + eps.x, 1, pos.y + eps.y), float4(1, 0, 0, 1)); // X direction
        AddDebugLine(float3(pos.x - eps.x, HXn, pos.y + eps.y), float3(pos.x - eps.x, 1, pos.y + eps.y), float4(1, 0, 0, 1)); // X direction
        AddDebugLine(float3(pos.x + eps.y, HYn, pos.y - eps.x), float3(pos.x + eps.y, 1, pos.y - eps.x), float4(1, 0, 0, 1)); // Y direction
        AddDebugLine(float3(pos.x + eps.y, HYp, pos.y + eps.x), float3(pos.x + eps.y, 1, pos.y + eps.x), float4(1, 0, 0, 1)); // Y direction
    }
#endif

	return normalize(float3( HXn - HXp, 2.0 * eps.x, HYn - HYp));
}

// Build orthonormal basis from a 3D Unit Vector Without normalization
// https://backend.orbit.dtu.dk/ws/portalfiles/portal/126824972/onb_frisvad_jgt2012_v2.pdf
void BuildOrthonormalBasis(float3 normal, out float3 tangent, out float3 biTangent)
{
    float a = normal.z > -0.9999999f ? 1.0f / (1.0f + normal.z) : 0.0f;
    float b = -normal.x * normal.y * a;

    tangent = float3(1.0f - normal.x * normal.x * a, b, -normal.x);
    biTangent = float3(b, 1.0f - normal.y * normal.y * a, -normal.y);
}

// Generate a random direction on the hemisphere using the cosine-weighted distribution
float3 GetRandomDirection(float3 normal)
{
    // Bounce off the surface using random direction
    float3 tangent, biTangent;
    BuildOrthonormalBasis(normal, tangent, biTangent);

    float r1 = NextRandomFloat();
    float r2 = NextRandomFloat();

    float	cosTheta = sqrt(r1);
    float	sinTheta = sqrt(1.0 - r1);
    float2	scPhi;
    sincos( 2.0 * PI * r2, scPhi.x, scPhi.y );

    float3	lsDirection = float3(sinTheta * scPhi.x, sinTheta * scPhi.y, cosTheta);

    return normalize(lsDirection.x * tangent + lsDirection.y * biTangent + lsDirection.z * normal);
}

float3 ColorFromIteration(int i)
{
    return 0.5 + 0.5 * sin(float3(0.5, 0.33, 0.17) * i + float3(0, 2.0, 4.0));
}

[numthreads(8,8,1)]
void Trace(uint3 id : SV_DispatchThreadID)
{
    InitRandomSeed(uint4(id + _Seed, 0));

    uint2 heightFieldDimensions;
    _HeightField.GetDimensions(heightFieldDimensions.x, heightFieldDimensions.y);

    float3 N = float3(0, 1, 0); // normal in the XZ plane
    float2 uv = (float2(id.xy) + 0.5) / (float)heightFieldDimensions.xy;
    
    float NdotL = dot(N, -_RayDir);

    // Clear debug
    _DebugTrace[id.xy] = 0;
    g_IsDebugThread = id.x == (uint)_DebugCursorPosition.x && id.y == (uint)_DebugCursorPosition.y;

    g_IsDebugThread = id.x == 200 && id.y == 200;
    
    // If the light is below the surface, we can skip it because we're only looking at direct diffuse interactions
    if (NdotL < 0)
        return;
    
    float3 up    = normalize(cross(float3(0, 0, 1), _RayDir));
    float3 right = normalize(cross(up, _RayDir));
    float2 p = uv - 0.5;
    float3 rayOrigin = -_RayDir + right * right.z * p.x + up * up.x * p.y;

    // Intersect with a plane to get closer before starting the ray march
    float3 pos = rayOrigin;
    float3 dir = normalize(_RayDir);

    // Intersect plane to get a starting point before the ray marching
    float denom = dot(N, _RayDir);
    float planePosition = 5 / (float)heightFieldDimensions.x; // the values in the height field are always less than 5.
    if (abs(denom) > 1e-5)
    {
        float t = -dot(N, rayOrigin - float3(0, planePosition, 0)) / denom;
        pos = rayOrigin + t * _RayDir;
    }

    pos.y = planePosition;
    rayOrigin = pos;

    // The height field is generated so that 1px is 1 unit, so we need to divide by the texture size to convert to world space.
    float localToWorldScale = rcp((float)heightFieldDimensions.x);

    float lastHeight = -5;
    float3 lastNormal = float3(0, 1, 0);
    [loop]
    int bounceCount = 0;
    for (bounceCount = 0; bounceCount < _MaxBounces; ++bounceCount)
    {
        // ray‐march / height field intersection
        float t = IntersectHeightField(pos, dir, localToWorldScale);

        // Debug ray tracing code
        if (g_IsDebugThread)
        {
            float d = t > 0 ? t : 1;
            AddDebugLine(pos, pos + dir * d, float4(ColorFromIteration(bounceCount), 1));
        }

        if (t < 0) break;

        // Place starting point at the intersection
        pos += t * dir;

        float h = SampleHeightField(pos.xz, localToWorldScale);
        lastHeight = h;

        // Calculate height field normal
        float3 normal = GetHeightFieldNormal(pos.xz, localToWorldScale);

        if (g_IsDebugThread)
        {
            AddDebugLine(pos, pos + normal * 0.1, float4(0, 1, 0, 1)); // visualize the normal
        }

        lastNormal = normal;
        
        // Random direction on the hemisphere
        dir = GetRandomDirection(normal);
        // dir = reflect(dir, -normal);
    }

    // Compute the output coordinates in the LUT between 0 and 1
    float3 outputPosition = float3(
        NdotL * 0.5 + 0.5, // N.L
        dot(-_RayDir, dir) * 0.5 + 0.5, // L.V
        _Roughness
    );

    float debug = 1 - lastHeight;
    debug = length(pos - rayOrigin) / 5;

    _DebugTrace[id.xy] = float4(debug, debug, debug, 1); // debug output to visualize the trace
    // _DebugTrace[id.xy] = float4(lastNormal, 1); // debug output to visualize the trace

    InterlockedAdd(_OutputLUT[(uint3)(saturate(outputPosition) * (_LUTSize - 1))], 1);
    // TODO:
    // InterlockedAdd(_OutputLUT[(uint3)(saturate(outputPosition) * _LUTSize)].y, bounceCount);
}

[numthreads(8,8,8)]
void ClearLUT(uint3 id : SV_DispatchThreadID)
{
    uint3 dimensions;
    _OutputLUT.GetDimensions(dimensions.x, dimensions.y, dimensions.z);

    if (id.x >= dimensions.x || id.y >= dimensions.y || id.z >= dimensions.z)
        return;

    _OutputLUT[id] = 0;
}

[numthreads(1,1,1)]
void ClearDebug(uint3 id : SV_DispatchThreadID)
{
    if (id.x == 0 && id.y == 0 && id.z == 0)
        _IndirectLineDrawArgs[0].instanceCount = 0;
}