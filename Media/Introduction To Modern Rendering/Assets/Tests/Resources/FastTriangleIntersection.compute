#pragma kernel CSMain

RWTexture2D<float4> _Output;

StructuredBuffer<float3> _TriangleVertices;
int _TriangleCount;
float3 _RayOrigin;

float ScalarTriple(float3 a, float3 b, float3 c)
{
    return dot(cross(a, b), c);
}

bool SameSign(float a, float b)
{
    return (a <= 0 && b <= 0) || (a > 0 && b > 0);
}

bool RayTriangleIntersect(
    float3 lineOrigin, float3 lineDirection,
    float3 a, float3 b, float3 c,
    out float u, out float v, out float w)
{
    // Create vectors from p to triangle vertices
    float3 pa = a - lineOrigin;
    float3 pb = b - lineOrigin;
    float3 pc = c - lineOrigin;
    
    // Test if the line is inside the edges bc, ca and ab. Done by testing
    // that the signed parallelepiped volumes, computed using scalar triple
    // products, are all positive
    
    // u = ScalarTriple(lineDirection, pc, pb);
    // if (u < 0.0f) return 0;
    // v = ScalarTriple(lineDirection, pa, pc);
    // if (v < 0.0f) return 0;
    // w = ScalarTriple(lineDirection, pb, pa);
    // if (w < 0.0f) return 0;

    // More optimized
    float3 m = cross(lineDirection, pc);
    u = dot(pb, m); // ScalarTriple(lineDirection, pc, pb);
    if (u < 0.0f) return false;
    v = -dot(pa, m); // ScalarTriple(lineDirection, pa, pc);
    // if (!SameSign(u, v))
    //     return false;
    if (v < 0.0f) return false;
    w = ScalarTriple(lineDirection, pb, pa);
    if (w < 0.0f) return false;
    // if (!SameSign(u, w))
    //     return false;

    // Compute the barycentric coordinates (u, v, w) by normalizing the parallelepiped volumes.
    float denom = 1.0f / (u + v + w);
    u *= denom;
    v *= denom;
    w *= denom;
    return true;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float width, height;
    _Output.GetDimensions(width, height);
    float2 uv = float2(id.x / width, id.y / height);
    // 90 degree fov
    float3 dir = normalize(float3(uv.x * 2 - 1, uv.y * 2 - 1, -1));

    float u, v, w;
    float hit = 0;
    float3 interpolatedPosition = 0;

    for (int i = 0; i < _TriangleCount; i++)
    {
        float3 v0 = _TriangleVertices[i * 3 + 0];
        float3 v1 = _TriangleVertices[i * 3 + 1];
        float3 v2 = _TriangleVertices[i * 3 + 2];
        if (RayTriangleIntersect(_RayOrigin, dir, v0, v1, v2, u, v, w))
            interpolatedPosition += v0 * u + v1 * v + v2 * w;
    }


    // _Output[id.xy] = float4(t, u, v, 1.0);
    _Output[id.xy] = float4(interpolatedPosition / float(_TriangleCount), 1);
}
